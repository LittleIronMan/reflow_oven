syntax = "proto3";
import "nanopb.proto";

// Этот тип перечисляет все возможные типы сообщений, которые будут далее определены.
// При передаче данных этот тип должен дополнять отправляемый пакет(в котором будет закодированное сообщение),
// чтобы принимающие стороны знали каким образом это сообщение декодировать
enum PB_MsgType {
	UNDEFINED = 0;
	CMD = 1; // команда
	RESPONSE = 2; // ответ на команду
	RESPONSE_GET_TEMP_PROFILE = 3; // ответ на команду GET_TEMP_PROFILE(большого размера, поэтому рассматривается особняком)
	TEMP_MEASURE = 4; // контроллер отправляет серверу текущее измерение температуры
	RESPONSE_TEMP_MEASURE = 5; // сервер отвечает что измерение было успешно принято
	FINISH_PROGRAM = 6; // котроллер оправляет серверу команду что он успешно завершил программу
	PLAIN_TEXT = 7; // простой текст
}

enum PB_CmdType {
	GET_TEMP_PROFILE = 0;
	GET_STATE = 1;
	START = 2;
	STOP = 3;
}

message PB_Command {
	PB_CmdType cmdType = 1;
	uint32 id = 2;
	uint32 priority = 3 [(nanopb).int_size = IS_8]; // [default = 1]; // чем больше эта величина, тем выше приоритет
}

message PB_TempMeasure {
	uint32 time = 1;
	uint32 temp = 2 [(nanopb).int_size = IS_16];
}

message PB_TempProfile {
	uint32 countPoints = 1 [(nanopb).int_size = IS_8]; // количество "точек" в термопрофиле
	repeated PB_TempMeasure data = 2 [(nanopb).max_count = 10, (nanopb).fixed_count = true];
}

message PB_ResponseGetTempProfile {
	bool success = 1; // [default = true];
	PB_TempProfile profile = 2;
}

enum PB_State {
	STOPPED = 0;
	LAUNCHED = 1;
}

enum PB_ErrorType {
	NONE = 0;
	FAULTY_TEMPERATURE_SENSOR = 1;
	FAULTY_RELAY = 2;
	UNKNOWN_ERROR = 3;
}

message PB_Response {
	PB_CmdType cmdType = 1;
	uint32 cmdId = 2;
	bool success = 3;
	PB_State state = 4;
	PB_ErrorType error = 5; // [default = NONE];
	uint32 time = 6; // некоторые ответы на команды будут возвращать величину времени, это специально отведеное для этого поле
}

// другие примеры кода
/*
syntax = "proto3";

message Car {
  required string model = 1;

  enum BodyType {
    sedan = 0;
    hatchback = 1;
    SUV = 2;
  }

  required BodyType type = 2 [default = sedan];
  optional string color = 3;
  required int32 year = 4;

  message Owner {
    required string name = 1;
    required string lastName = 2; 
    required int64 driverLicense = 3;
  }

  repeated Owner previousOwner = 5;
}
*/
