/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Sun Oct 06 15:01:24 2019. */

#ifndef PB_REFLOW_OVEN_PB_H_INCLUDED
#define PB_REFLOW_OVEN_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _MsgType {
    MsgType_UNDEFINED = 0,
    MsgType_CMD = 1,
    MsgType_ANS_CMD_GET_TEMP_PROFILE = 2,
    MsgType_ANS_CMD_GET_STATE = 3,
    MsgType_ANS_CMD_START = 4,
    MsgType_ANS_CMD_STOP = 5,
    MsgType_TEMP_MEASURE = 6,
    MsgType_ANS_TEMP_MEASURE = 7,
    MsgType_FINISH_PROGRAM = 8,
    MsgType_PLAIN_TEXT = 9
} MsgType;
#define _MsgType_MIN MsgType_UNDEFINED
#define _MsgType_MAX MsgType_PLAIN_TEXT
#define _MsgType_ARRAYSIZE ((MsgType)(MsgType_PLAIN_TEXT+1))

typedef enum _OvenState {
    OvenState_STOPPED = 0,
    OvenState_LAUNCHED = 1
} OvenState;
#define _OvenState_MIN OvenState_STOPPED
#define _OvenState_MAX OvenState_LAUNCHED
#define _OvenState_ARRAYSIZE ((OvenState)(OvenState_LAUNCHED+1))

typedef enum _OvenErrorType {
    OvenErrorType_NONE = 0,
    OvenErrorType_FAULTY_TEMPERATURE_SENSOR = 1,
    OvenErrorType_FAULTY_RELAY = 2,
    OvenErrorType_UNKNOWN_ERROR = 3
} OvenErrorType;
#define _OvenErrorType_MIN OvenErrorType_NONE
#define _OvenErrorType_MAX OvenErrorType_UNKNOWN_ERROR
#define _OvenErrorType_ARRAYSIZE ((OvenErrorType)(OvenErrorType_UNKNOWN_ERROR+1))

typedef enum _OvenCommand_Type {
    OvenCommand_Type_GET_TEMP_PROFILE = 0,
    OvenCommand_Type_GET_STATE = 1,
    OvenCommand_Type_START = 2,
    OvenCommand_Type_STOP = 3
} OvenCommand_Type;
#define _OvenCommand_Type_MIN OvenCommand_Type_GET_TEMP_PROFILE
#define _OvenCommand_Type_MAX OvenCommand_Type_STOP
#define _OvenCommand_Type_ARRAYSIZE ((OvenCommand_Type)(OvenCommand_Type_STOP+1))

/* Struct definitions */
typedef struct _AnsCmdGetState {
    OvenState state;
    OvenErrorType error;
/* @@protoc_insertion_point(struct:AnsCmdGetState) */
} AnsCmdGetState;

typedef struct _AnsCmdStart {
    bool success;
    uint32_t startTime;
/* @@protoc_insertion_point(struct:AnsCmdStart) */
} AnsCmdStart;

typedef struct _AnsCmdStop {
    bool success;
    uint32_t stopTime;
/* @@protoc_insertion_point(struct:AnsCmdStop) */
} AnsCmdStop;

typedef struct _AnsTempMeasure {
    bool success;
/* @@protoc_insertion_point(struct:AnsTempMeasure) */
} AnsTempMeasure;

typedef struct _FinishProgram {
    bool success;
/* @@protoc_insertion_point(struct:FinishProgram) */
} FinishProgram;

typedef struct _OvenCommand {
    OvenCommand_Type type;
    uint32_t id;
    uint8_t priority;
/* @@protoc_insertion_point(struct:OvenCommand) */
} OvenCommand;

typedef struct _TempMeasure {
    uint32_t time;
    uint16_t temp;
/* @@protoc_insertion_point(struct:TempMeasure) */
} TempMeasure;

typedef struct _TempProfile {
    uint8_t countPoints;
    TempMeasure data[10];
/* @@protoc_insertion_point(struct:TempProfile) */
} TempProfile;

typedef struct _AnsCmdGetTempProfile {
    bool success;
    TempProfile profile;
/* @@protoc_insertion_point(struct:AnsCmdGetTempProfile) */
} AnsCmdGetTempProfile;

/* Default values for struct fields */

/* Initializer values for message structs */
#define OvenCommand_init_default                 {_OvenCommand_Type_MIN, 0, 0}
#define TempMeasure_init_default                 {0, 0}
#define TempProfile_init_default                 {0, {TempMeasure_init_default, TempMeasure_init_default, TempMeasure_init_default, TempMeasure_init_default, TempMeasure_init_default, TempMeasure_init_default, TempMeasure_init_default, TempMeasure_init_default, TempMeasure_init_default, TempMeasure_init_default}}
#define AnsCmdGetTempProfile_init_default        {0, TempProfile_init_default}
#define AnsCmdGetState_init_default              {_OvenState_MIN, _OvenErrorType_MIN}
#define AnsCmdStart_init_default                 {0, 0}
#define AnsCmdStop_init_default                  {0, 0}
#define AnsTempMeasure_init_default              {0}
#define FinishProgram_init_default               {0}
#define OvenCommand_init_zero                    {_OvenCommand_Type_MIN, 0, 0}
#define TempMeasure_init_zero                    {0, 0}
#define TempProfile_init_zero                    {0, {TempMeasure_init_zero, TempMeasure_init_zero, TempMeasure_init_zero, TempMeasure_init_zero, TempMeasure_init_zero, TempMeasure_init_zero, TempMeasure_init_zero, TempMeasure_init_zero, TempMeasure_init_zero, TempMeasure_init_zero}}
#define AnsCmdGetTempProfile_init_zero           {0, TempProfile_init_zero}
#define AnsCmdGetState_init_zero                 {_OvenState_MIN, _OvenErrorType_MIN}
#define AnsCmdStart_init_zero                    {0, 0}
#define AnsCmdStop_init_zero                     {0, 0}
#define AnsTempMeasure_init_zero                 {0}
#define FinishProgram_init_zero                  {0}

/* Field tags (for use in manual encoding/decoding) */
#define AnsCmdGetState_state_tag                 1
#define AnsCmdGetState_error_tag                 2
#define AnsCmdStart_success_tag                  1
#define AnsCmdStart_startTime_tag                2
#define AnsCmdStop_success_tag                   1
#define AnsCmdStop_stopTime_tag                  2
#define AnsTempMeasure_success_tag               1
#define FinishProgram_success_tag                1
#define OvenCommand_type_tag                     1
#define OvenCommand_id_tag                       2
#define OvenCommand_priority_tag                 3
#define TempMeasure_time_tag                     1
#define TempMeasure_temp_tag                     2
#define TempProfile_countPoints_tag              1
#define TempProfile_data_tag                     2
#define AnsCmdGetTempProfile_success_tag         1
#define AnsCmdGetTempProfile_profile_tag         2

/* Struct field encoding specification for nanopb */
extern const pb_field_t OvenCommand_fields[4];
extern const pb_field_t TempMeasure_fields[3];
extern const pb_field_t TempProfile_fields[3];
extern const pb_field_t AnsCmdGetTempProfile_fields[3];
extern const pb_field_t AnsCmdGetState_fields[3];
extern const pb_field_t AnsCmdStart_fields[3];
extern const pb_field_t AnsCmdStop_fields[3];
extern const pb_field_t AnsTempMeasure_fields[2];
extern const pb_field_t FinishProgram_fields[2];

/* Maximum encoded size of messages (where known) */
#define OvenCommand_size                         14
#define TempMeasure_size                         12
#define TempProfile_size                         146
#define AnsCmdGetTempProfile_size                151
#define AnsCmdGetState_size                      4
#define AnsCmdStart_size                         8
#define AnsCmdStop_size                          8
#define AnsTempMeasure_size                      2
#define FinishProgram_size                       2

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define REFLOW_OVEN_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
