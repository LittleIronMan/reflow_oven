/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Sun Oct 13 18:54:43 2019. */

#ifndef PB_REFLOW_OVEN_PB_H_INCLUDED
#define PB_REFLOW_OVEN_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _PB_MsgType {
    PB_MsgType_UNDEFINED = 0,
    PB_MsgType_CMD = 1,
    PB_MsgType_RESPONSE = 2,
    PB_MsgType_RESPONSE_GET_TEMP_PROFILE = 3,
    PB_MsgType_PERIODIC_MESSAGE = 4,
    PB_MsgType_RESPONSE_TEMP_MEASURE = 5,
    PB_MsgType_FINISH_PROGRAM = 6,
    PB_MsgType_PLAIN_TEXT = 7,
    PB_MsgType_SWITCH_OVEN_STATE = 8,
    PB_MsgType_FULL_CONTROL_DATA = 9
} PB_MsgType;
#define _PB_MsgType_MIN PB_MsgType_UNDEFINED
#define _PB_MsgType_MAX PB_MsgType_FULL_CONTROL_DATA
#define _PB_MsgType_ARRAYSIZE ((PB_MsgType)(PB_MsgType_FULL_CONTROL_DATA+1))

typedef enum _PB_CmdType {
    PB_CmdType_GET_ALL_INFO = 0,
    PB_CmdType_GET_STATE = 1,
    PB_CmdType_HARD_RESET = 2,
    PB_CmdType_CLIENT_REQUIRES_RESET = 3,
    PB_CmdType_MANUAL_ON = 4,
    PB_CmdType_MANUAL_OFF = 5,
    PB_CmdType_MANUAL_KEEP_CURRENT = 6,
    PB_CmdType_STOP = 7,
    PB_CmdType_START = 8,
    PB_CmdType_START_BG = 9,
    PB_CmdType_SET_TIME = 10,
    PB_CmdType_PAUSE = 11,
    PB_CmdType_RESUME = 12,
    PB_CmdType_SET_CONST_TEMP = 13,
    PB_CmdType_ENABLE_STRICT_MODE = 14,
    PB_CmdType_DISABLE_STRICT_MODE = 15
} PB_CmdType;
#define _PB_CmdType_MIN PB_CmdType_GET_ALL_INFO
#define _PB_CmdType_MAX PB_CmdType_DISABLE_STRICT_MODE
#define _PB_CmdType_ARRAYSIZE ((PB_CmdType)(PB_CmdType_DISABLE_STRICT_MODE+1))

typedef enum _PB_OvenState {
    PB_OvenState_OFF = 0,
    PB_OvenState_ON = 1
} PB_OvenState;
#define _PB_OvenState_MIN PB_OvenState_OFF
#define _PB_OvenState_MAX PB_OvenState_ON
#define _PB_OvenState_ARRAYSIZE ((PB_OvenState)(PB_OvenState_ON+1))

typedef enum _PB_ControlMode {
    PB_ControlMode_DEFAULT_OFF = 0,
    PB_ControlMode_FOLLOW_TEMP_PROFILE = 1,
    PB_ControlMode_HOLD_CONST_TEMP = 2,
    PB_ControlMode_MANUAL = 3
} PB_ControlMode;
#define _PB_ControlMode_MIN PB_ControlMode_DEFAULT_OFF
#define _PB_ControlMode_MAX PB_ControlMode_MANUAL
#define _PB_ControlMode_ARRAYSIZE ((PB_ControlMode)(PB_ControlMode_MANUAL+1))

typedef enum _PB_ControlState {
    PB_ControlState_DISABLED = 0,
    PB_ControlState_BACKGROUND = 1,
    PB_ControlState_ENABLED = 2
} PB_ControlState;
#define _PB_ControlState_MIN PB_ControlState_DISABLED
#define _PB_ControlState_MAX PB_ControlState_ENABLED
#define _PB_ControlState_ARRAYSIZE ((PB_ControlState)(PB_ControlState_ENABLED+1))

typedef enum _PB_ErrorType {
    PB_ErrorType_NONE = 0,
    PB_ErrorType_FAULTY_TEMPERATURE_SENSOR = 1,
    PB_ErrorType_FAULTY_RELAY = 2,
    PB_ErrorType_UNKNOWN_COMMAND = 3,
    PB_ErrorType_UNKNOWN_ERROR = 4
} PB_ErrorType;
#define _PB_ErrorType_MIN PB_ErrorType_NONE
#define _PB_ErrorType_MAX PB_ErrorType_UNKNOWN_ERROR
#define _PB_ErrorType_ARRAYSIZE ((PB_ErrorType)(PB_ErrorType_UNKNOWN_ERROR+1))

/* Struct definitions */
typedef struct _PB_Command {
    PB_CmdType cmdType;
    uint32_t id;
    uint8_t priority;
    uint8_t acmIdx;
    uint32_t value;
/* @@protoc_insertion_point(struct:PB_Command) */
} PB_Command;

typedef struct _PB_Time {
    uint32_t unixSeconds;
    float mills;
/* @@protoc_insertion_point(struct:PB_Time) */
} PB_Time;

typedef struct _PB_ControlData {
    PB_ControlMode controlMode;
    PB_ControlState controlState;
    bool isPaused;
    PB_Time startTime;
    PB_Time elapsedTime;
    PB_Time duration;
/* @@protoc_insertion_point(struct:PB_ControlData) */
} PB_ControlData;

typedef struct _PB_Response {
    PB_CmdType cmdType;
    uint32_t cmdId;
    bool success;
    PB_OvenState ovenState;
    PB_ErrorType error;
    PB_Time time;
/* @@protoc_insertion_point(struct:PB_Response) */
} PB_Response;

typedef struct _PB_SwitchOvenState {
    PB_Time time;
    PB_OvenState ovenState;
/* @@protoc_insertion_point(struct:PB_SwitchOvenState) */
} PB_SwitchOvenState;

typedef struct _PB_TempMeasure {
    PB_Time time;
    float temp;
/* @@protoc_insertion_point(struct:PB_TempMeasure) */
} PB_TempMeasure;

typedef struct _PB_FullControlData {
    PB_ControlMode leadControlMode;
    PB_OvenState ovenState;
    float constTempValue;
    bool strictMode;
    bool strictWaitEnabled;
    PB_ControlData data[2];
/* @@protoc_insertion_point(struct:PB_FullControlData) */
} PB_FullControlData;

typedef struct _PB_PeriodicMessage {
    PB_TempMeasure tempMeasure;
    bool strictWaitEnabled;
/* @@protoc_insertion_point(struct:PB_PeriodicMessage) */
} PB_PeriodicMessage;

typedef struct _PB_TempProfile {
    uint8_t countPoints;
    PB_TempMeasure data[10];
/* @@protoc_insertion_point(struct:PB_TempProfile) */
} PB_TempProfile;

typedef struct _PB_ResponseGetTempProfile {
    bool success;
    PB_TempProfile profile;
/* @@protoc_insertion_point(struct:PB_ResponseGetTempProfile) */
} PB_ResponseGetTempProfile;

/* Default values for struct fields */

/* Initializer values for message structs */
#define PB_Command_init_default                  {_PB_CmdType_MIN, 0, 0, 0, 0}
#define PB_Time_init_default                     {0, 0}
#define PB_TempMeasure_init_default              {PB_Time_init_default, 0}
#define PB_PeriodicMessage_init_default          {PB_TempMeasure_init_default, 0}
#define PB_TempProfile_init_default              {0, {PB_TempMeasure_init_default, PB_TempMeasure_init_default, PB_TempMeasure_init_default, PB_TempMeasure_init_default, PB_TempMeasure_init_default, PB_TempMeasure_init_default, PB_TempMeasure_init_default, PB_TempMeasure_init_default, PB_TempMeasure_init_default, PB_TempMeasure_init_default}}
#define PB_ResponseGetTempProfile_init_default   {0, PB_TempProfile_init_default}
#define PB_Response_init_default                 {_PB_CmdType_MIN, 0, 0, _PB_OvenState_MIN, _PB_ErrorType_MIN, PB_Time_init_default}
#define PB_SwitchOvenState_init_default          {PB_Time_init_default, _PB_OvenState_MIN}
#define PB_ControlData_init_default              {_PB_ControlMode_MIN, _PB_ControlState_MIN, 0, PB_Time_init_default, PB_Time_init_default, PB_Time_init_default}
#define PB_FullControlData_init_default          {_PB_ControlMode_MIN, _PB_OvenState_MIN, 0, 0, 0, {PB_ControlData_init_default, PB_ControlData_init_default}}
#define PB_Command_init_zero                     {_PB_CmdType_MIN, 0, 0, 0, 0}
#define PB_Time_init_zero                        {0, 0}
#define PB_TempMeasure_init_zero                 {PB_Time_init_zero, 0}
#define PB_PeriodicMessage_init_zero             {PB_TempMeasure_init_zero, 0}
#define PB_TempProfile_init_zero                 {0, {PB_TempMeasure_init_zero, PB_TempMeasure_init_zero, PB_TempMeasure_init_zero, PB_TempMeasure_init_zero, PB_TempMeasure_init_zero, PB_TempMeasure_init_zero, PB_TempMeasure_init_zero, PB_TempMeasure_init_zero, PB_TempMeasure_init_zero, PB_TempMeasure_init_zero}}
#define PB_ResponseGetTempProfile_init_zero      {0, PB_TempProfile_init_zero}
#define PB_Response_init_zero                    {_PB_CmdType_MIN, 0, 0, _PB_OvenState_MIN, _PB_ErrorType_MIN, PB_Time_init_zero}
#define PB_SwitchOvenState_init_zero             {PB_Time_init_zero, _PB_OvenState_MIN}
#define PB_ControlData_init_zero                 {_PB_ControlMode_MIN, _PB_ControlState_MIN, 0, PB_Time_init_zero, PB_Time_init_zero, PB_Time_init_zero}
#define PB_FullControlData_init_zero             {_PB_ControlMode_MIN, _PB_OvenState_MIN, 0, 0, 0, {PB_ControlData_init_zero, PB_ControlData_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define PB_Command_cmdType_tag                   1
#define PB_Command_id_tag                        2
#define PB_Command_priority_tag                  3
#define PB_Command_acmIdx_tag                    4
#define PB_Command_value_tag                     5
#define PB_Time_unixSeconds_tag                  1
#define PB_Time_mills_tag                        2
#define PB_ControlData_controlMode_tag           1
#define PB_ControlData_controlState_tag          2
#define PB_ControlData_isPaused_tag              3
#define PB_ControlData_startTime_tag             4
#define PB_ControlData_elapsedTime_tag           5
#define PB_ControlData_duration_tag              6
#define PB_Response_cmdType_tag                  1
#define PB_Response_cmdId_tag                    2
#define PB_Response_success_tag                  3
#define PB_Response_ovenState_tag                4
#define PB_Response_error_tag                    5
#define PB_Response_time_tag                     6
#define PB_SwitchOvenState_time_tag              1
#define PB_SwitchOvenState_ovenState_tag         2
#define PB_TempMeasure_time_tag                  1
#define PB_TempMeasure_temp_tag                  2
#define PB_FullControlData_leadControlMode_tag   1
#define PB_FullControlData_ovenState_tag         2
#define PB_FullControlData_constTempValue_tag    3
#define PB_FullControlData_strictMode_tag        4
#define PB_FullControlData_strictWaitEnabled_tag 5
#define PB_FullControlData_data_tag              6
#define PB_PeriodicMessage_tempMeasure_tag       1
#define PB_PeriodicMessage_strictWaitEnabled_tag 2
#define PB_TempProfile_countPoints_tag           1
#define PB_TempProfile_data_tag                  2
#define PB_ResponseGetTempProfile_success_tag    1
#define PB_ResponseGetTempProfile_profile_tag    2

/* Struct field encoding specification for nanopb */
extern const pb_field_t PB_Command_fields[6];
extern const pb_field_t PB_Time_fields[3];
extern const pb_field_t PB_TempMeasure_fields[3];
extern const pb_field_t PB_PeriodicMessage_fields[3];
extern const pb_field_t PB_TempProfile_fields[3];
extern const pb_field_t PB_ResponseGetTempProfile_fields[3];
extern const pb_field_t PB_Response_fields[7];
extern const pb_field_t PB_SwitchOvenState_fields[3];
extern const pb_field_t PB_ControlData_fields[7];
extern const pb_field_t PB_FullControlData_fields[7];

/* Maximum encoded size of messages (where known) */
#define PB_Command_size                          26
#define PB_Time_size                             11
#define PB_TempMeasure_size                      18
#define PB_PeriodicMessage_size                  22
#define PB_TempProfile_size                      206
#define PB_ResponseGetTempProfile_size           211
#define PB_Response_size                         27
#define PB_SwitchOvenState_size                  15
#define PB_ControlData_size                      45
#define PB_FullControlData_size                  107

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define REFLOW_OVEN_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
